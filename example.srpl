main {
    /*
        Multi-line
        Comments

        Stuff that isn't printed to the screen or setting variables (expressions) are getting filtered out
    */

    var start_time = timer!(); # start a timer

    // here is the classic hello world
    println!("hello, world"); # identical syntax to rust, but a very different implementation

    // now here is some maths *and also variables*
    var maths: num = 1 + 2 / 3 * 96 - -5;
    println!("here's the output of the maths: " <> as_str!(maths)); # string concatination
    # casting to a string is alos demonstrated

    // blocks are nice
    var block_msg: str = {
        var maths = 99 / (1 + 2);

        var message = {
            println!("here is a deeply nested block");
            var message = "blocks are nice, here's some more maths: " <> as_str!(maths);
            message
        };
        
        message # return the message as the return value of the block
    };

    println!(block_msg); // print the block message

    var nil_value: nil = ();

    println!("here is a nil value cast to a string: " <> as_str!(nil_value));

    // panic!();

    # Now it's time to ask the user a question
    var mut username = input!("What's your first name?");

    # lets mutate it
    mut username = username <> " " <> input!("What's your last name?");
    
    // lets print the greeting
    println!("hello there " <> username <> "! nice to meet you!");

    // heres a list
    var mut list: [str] = ["nice"];
    mut list = ["hello", "there", "here", "is", "a", "list", "of", "strings"];
    println!("here is a list cast to a string: " <> as_str!(list));
    
    // lets find the length of a list
    list_len!("nice");
    println!("wow, the list before had " <> as_str!(list_len!(list)) <> " items");
    println!("here's a list's length without a variable: " <> as_str!(list_len!(["there", "will be", "four items", "in this list"])));

    // lets iterate through that list
    var mut i = 0;
    while (i < list_len!(list)) {
        println!("item " <> as_str!(i) <> " of list: " <> "<replace later when list builtins are added>");
        mut i = i + 1;
    };

    // wow booleans
    var boolean: bool = 1 + 2 == 3 && 4 * 7 != 2 || false;
    var another_boolean: bool = !!boolean && true != false;
    println!("Here's that boolean: " <> as_str!(another_boolean));

    // nice if statements there
    var is_working = 1 + 2 == 3 && 1 + 2 != 4;
    if (is_working)
        println!("YOOOOOOOO IT'S WORKING!!!!!!!")
    else if (1 + 2 == 3)
        println!("the first one works")
    else {
        println!("ohno, that's not good");
        println!("allows for blocks");
    };

    # end the timer
    var end_time = timer!();
    println!("program took " <> as_str!(end_time - start_time) <> "s to compvare");
}
